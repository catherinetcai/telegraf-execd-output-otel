// Code generated by mockery v2.45.0. DO NOT EDIT.

package ptraceotlp

import (
	context "context"

	grpc "google.golang.org/grpc"

	mock "github.com/stretchr/testify/mock"

	ptraceotlp "go.opentelemetry.io/collector/pdata/ptrace/ptraceotlp"
)

// MockGRPCClient is an autogenerated mock type for the GRPCClient type
type MockGRPCClient struct {
	mock.Mock
}

type MockGRPCClient_Expecter struct {
	mock *mock.Mock
}

func (_m *MockGRPCClient) EXPECT() *MockGRPCClient_Expecter {
	return &MockGRPCClient_Expecter{mock: &_m.Mock}
}

// Export provides a mock function with given fields: ctx, request, opts
func (_m *MockGRPCClient) Export(ctx context.Context, request ptraceotlp.ExportRequest, opts ...grpc.CallOption) (ptraceotlp.ExportResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, request)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for Export")
	}

	var r0 ptraceotlp.ExportResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, ptraceotlp.ExportRequest, ...grpc.CallOption) (ptraceotlp.ExportResponse, error)); ok {
		return rf(ctx, request, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, ptraceotlp.ExportRequest, ...grpc.CallOption) ptraceotlp.ExportResponse); ok {
		r0 = rf(ctx, request, opts...)
	} else {
		r0 = ret.Get(0).(ptraceotlp.ExportResponse)
	}

	if rf, ok := ret.Get(1).(func(context.Context, ptraceotlp.ExportRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, request, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockGRPCClient_Export_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Export'
type MockGRPCClient_Export_Call struct {
	*mock.Call
}

// Export is a helper method to define mock.On call
//   - ctx context.Context
//   - request ptraceotlp.ExportRequest
//   - opts ...grpc.CallOption
func (_e *MockGRPCClient_Expecter) Export(ctx interface{}, request interface{}, opts ...interface{}) *MockGRPCClient_Export_Call {
	return &MockGRPCClient_Export_Call{Call: _e.mock.On("Export",
		append([]interface{}{ctx, request}, opts...)...)}
}

func (_c *MockGRPCClient_Export_Call) Run(run func(ctx context.Context, request ptraceotlp.ExportRequest, opts ...grpc.CallOption)) *MockGRPCClient_Export_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]grpc.CallOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		run(args[0].(context.Context), args[1].(ptraceotlp.ExportRequest), variadicArgs...)
	})
	return _c
}

func (_c *MockGRPCClient_Export_Call) Return(_a0 ptraceotlp.ExportResponse, _a1 error) *MockGRPCClient_Export_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockGRPCClient_Export_Call) RunAndReturn(run func(context.Context, ptraceotlp.ExportRequest, ...grpc.CallOption) (ptraceotlp.ExportResponse, error)) *MockGRPCClient_Export_Call {
	_c.Call.Return(run)
	return _c
}

// unexported provides a mock function with given fields:
func (_m *MockGRPCClient) unexported() {
	_m.Called()
}

// MockGRPCClient_unexported_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'unexported'
type MockGRPCClient_unexported_Call struct {
	*mock.Call
}

// unexported is a helper method to define mock.On call
func (_e *MockGRPCClient_Expecter) unexported() *MockGRPCClient_unexported_Call {
	return &MockGRPCClient_unexported_Call{Call: _e.mock.On("unexported")}
}

func (_c *MockGRPCClient_unexported_Call) Run(run func()) *MockGRPCClient_unexported_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockGRPCClient_unexported_Call) Return() *MockGRPCClient_unexported_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockGRPCClient_unexported_Call) RunAndReturn(run func()) *MockGRPCClient_unexported_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockGRPCClient creates a new instance of MockGRPCClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockGRPCClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockGRPCClient {
	mock := &MockGRPCClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
